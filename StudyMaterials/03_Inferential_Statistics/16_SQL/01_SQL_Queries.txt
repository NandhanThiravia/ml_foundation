1) Basic
SELECT occurred_at, account_id, channel
FROM web_events

2) LIMIT
SELECT occurred_at, account_id, channel
FROM web_events
LIMIT 20

3) Write a query to return the 10 earliest orders in the orders table. Include the id, occurred_at, and total_amt_usd.
SELECT id, occurred_at, total_amt_usd
FROM orders
ORDER BY occurred_at DESC
LIMIT 10

4) Write a query to return the top 5 orders in terms of largest total_amt_usd. Include the id, account_id, and total_amt_usd.
SELECT id, account_id, total_amt_usd
FROM orders
ORDER BY total_amt_usd DESC
LIMIT 5

5) Write a query to return the lowest 20 orders in terms of smallest total_amt_usd. Include the id, account_id, and total_amt_usd.
SELECT id, account_id, total_amt_usd
FROM orders
ORDER BY total_amt_usd
LIMIT 20

6) Write a query that displays the order ID, account ID, and total dollar amount for all the orders, sorted first by the account ID (in ascending order), and then by the total dollar amount (in descending order). 
SELECT id, account_id, total
FROM orders
ORDER BY account_id ASC, total DESC

7) Now write a query that again displays order ID, account ID, and total dollar amount for each order, but this time sorted first by total dollar amount (in descending order), and then by account ID (in ascending order). 
SELECT id, account_id, total
FROM orders
ORDER BY total DESC, account_id ASC

8) Pulls the first 5 rows and all columns from the orders table that have a dollar amount of gloss_amt_usd greater than or equal to 1000.
SELECT *
FROM orders
WHERE gloss_amt_usd >= 1000
ORDER BY gloss_amt_usd DESC
LIMIT 5

9) Pulls the first 10 rows and all columns from the orders table that have a total_amt_usd less than 500.
SELECT *
FROM orders
WHERE gloss_amt_usd < 500
ORDER BY gloss_amt_usd DESC
LIMIT 10

10) Filter the accounts table to include the company name, website, and the primary point of contact (primary_poc) just for the Exxon Mobil company in the accounts table.
SELECT name, website, primary_poc
FROM accounts
WHERE name = 'Exxon Mobil'

11) Create a column that divides the standard_amt_usd by the standard_qty to find the unit price for standard paper for each order. Limit the results to the first 10 orders, and include the id and account_id fields. 
SELECT id, account_id, (standard_amt_usd / standard_qty) AS unit_price
FROM orders
LIMIT 10

12) Write a query that finds the percentage of revenue that comes from poster paper for each order. You will need to use only the columns that end with _usd. (Try to do this without using the total column.) Display the id and account_id fields also. 

NOTE - you will receive an error with the correct solution to this question. This occurs because at least one of the values in the data creates a division by zero in your formula. You will learn later in the course how to fully handle this issue. For now, you can just limit your calculations to the first 10 orders, as we did in question #1, and you'll avoid that set of data that causes the problem.
SELECT id, account_id, ((poster_amt_usd / total_amt_usd) * 100) AS poster_percent
FROM orders
LIMIT 10

13) All the companies whose names start with 'C'. 
SELECT name
FROM accounts
WHERE name LIKE 'C%'

14) All companies whose names contain the string 'one' somewhere in the name.
SELECT name
FROM accounts
WHERE name LIKE '%one%'

15) All companies whose names end with 's'.
SELECT name
FROM accounts
WHERE name LIKE '%s'

16) Use the accounts table to find the account name, primary_poc, and sales_rep_id for Walmart, Target, and Nordstrom.
SELECT name, primary_poc, sales_rep_id
FROM accounts
WHERE name IN ('Walmart', 'Target', 'Nordstrom')

17) Use the web_events table to find all information regarding individuals who were contacted via the channel of organic or adwords.
SELECT *
FROM web_events
WHERE channel IN ('organic', 'adwords')

18) Use the accounts table to find the account name, primary poc, and sales rep id for all stores except Walmart, Target, and Nordstrom.
SELECT name, primary_poc, sales_rep_id
FROM accounts
WHERE name NOT IN ('Walmart', 'Target', 'Nordstrom')

19) Use the web_events table to find all information regarding individuals who were contacted via any method except using organic or adwords methods.
SELECT *
FROM web_events
WHERE channel NOT IN ('organic', 'adwords')

20) All the companies whose names do not start with 'C'.
SELECT name
FROM accounts
WHERE name NOT LIKE 'C%'

21) All companies whose names do not contain the string 'one' somewhere in the name.
SELECT name
FROM accounts
WHERE name NOT LIKE '%one%'

22) All companies whose names do not end with 's'.
SELECT name
FROM accounts
WHERE name NOT LIKE '%s'

23) Write a query that returns all the orders where the standard_qty is over 1000, the poster_qty is 0, and the gloss_qty is 0.
SELECT *
FROM orders
WHERE standard_qty > 1000 AND poster_qty = 0 AND gloss_qty = 0

24) Using the accounts table, find all the companies whose names do not start with 'C' and end with 's'.
SELECT *
FROM accounts
WHERE name NOT LIKE 'C%' AND name LIKE '%s'

25) When you use the BETWEEN operator in SQL, do the results include the values of your endpoints, or not? Figure out the answer to this important question by writing a query that displays the order date and gloss_qty data for all orders where gloss_qty is between 24 and 29. Then look at your output to see if the BETWEEN operator included the begin and end values or not.
SELECT *
FROM orders
WHERE gloss_qty BETWEEN 24 AND 29

26) Use the web_events table to find all information regarding individuals who were contacted via the organic or adwords channels, and started their account at any point in 2016, sorted from newest to oldest.
SELECT *
FROM web_events
WHERE channel = 'organic' OR channel = 'adwords' AND occurred_at BETWEEN '2016-01-01' AND '2017-01-01'

27) Find list of orders ids where either gloss_qty or poster_qty is greater than 4000. Only include the id field in the resulting table.
SELECT id
FROM orders
WHERE gloss_qty > 4000 OR poster_qty > 4000

28) Write a query that returns a list of orders where the standard_qty is zero and either the gloss_qty or poster_qty is over 1000.
SELECT *
FROM orders
WHERE standard_qty = 0 AND (poster_qty > 1000 OR gloss_qty > 1000)

29) Find all the company names that start with a 'C' or 'W', and the primary contact contains 'ana' or 'Ana', but it doesn't contain 'eana'.
SELECT *
FROM accounts
where (name LIKE 'C%' OR name LIKE 'W%') AND ((primary_poc LIKE '%ana%' or primary_poc LIKE '%Ana%') AND primary_poc NOT LIKE '%eana%')

Statement	How to Use It			Other Details
SELECT	SELECT Col1, Col2, ...		Provide the columns you want
FROM	      FROM Table				Provide the table where the columns exist
LIMIT		LIMIT 10				Limits based number of rows returned
ORDER BY	ORDER BY Col			Orders table based on the column. Used with DESC.
WHERE		WHERE Col > 5			A conditional statement to filter your results
LIKE		WHERE Col LIKE '%me%'		Only pulls rows where column has 'me' within the text
IN		WHERE Col IN ('Y', 'N')		A filter for only rows with column of 'Y' or 'N'
NOT		WHERE Col NOT IN ('Y', 'N')	NOT is frequently used with LIKE and IN
AND		WHERE Col1 > 5 AND Col2 < 3	Filter rows where two or more conditions must be true
OR		WHERE Col1 > 5 OR Col2 < 3	Filter rows where at least one condition must be true
BETWEEN	WHERE Col BETWEEN 3 AND 5	Often easier syntax than using an AND

--------------
     JOIN
--------------
1) Provide a table for all web_events associated with account name of Walmart. There should be three columns. Be sure to include the primary_poc, time of the event, and the channel for each event. Additionally, you might choose to add a fourth column to assure only Walmart events were chosen. 
SELECT web_events.*, accounts.*
FROM web_events
JOIN accounts
	ON web_events.account_id = accounts.id
WHERE accounts.name = 'Walmart'

2) Provide a table that provides the region for each sales_rep along with their associated accounts. Your final table should include three columns: the region name, the sales rep name, and the account name. Sort the accounts alphabetically (A-Z) according to account name. 
SELECT sales_reps.name sales_rep_name, region.name region_name, accounts.name accounts_name
FROM sales_reps
JOIN region
	ON sales_reps.region_id = region.id
JOIN accounts
	ON accounts.sales_rep_id = sales_reps.id
ORDER BY accounts.name;

3) Provide the name for each region for every order, as well as the account name and the unit price they paid (total_amt_usd/total) for the order. Your final table should have 3 columns: region name, account name, and unit price. A few accounts have 0 for total, so I divided by (total + 0.01) to assure not dividing by zero.
SELECT region.name region_name, accounts.name account_name, (orders.total_amt_usd / (orders.total + 0.00001)) unit_price
FROM orders
JOIN accounts
	ON orders.account_id = accounts.id
JOIN sales_reps
	ON accounts.sales_rep_id = sales_reps.id
JOIN region
	ON region.id = sales_reps.region_id
	
4) Provide a table that provides the region for each sales_rep along with their associated accounts. This time only for the Midwest region. Your final table should include three columns: the region name, the sales rep name, and the account name. Sort the accounts alphabetically (A-Z) according to account name.
SELECT sales_reps.name sales_rep_name, region.name region_name, accounts.name account_name
FROM sales_reps
LEFT JOIN region
	ON sales_reps.region_id = region.id AND
    	region.name = 'Midwest'
LEFT JOIN accounts
	ON sales_reps.id = accounts.sales_rep_id
ORDER BY accounts.name

5) Provide a table that provides the region for each sales_rep along with their associated accounts. This time only for accounts where the sales rep has a first name starting with S and in the Midwest region. Your final table should include three columns: the region name, the sales rep name, and the account name. Sort the accounts alphabetically (A-Z) according to account name. 
SELECT sales_reps.name sales_rep_name, region.name region_name, accounts.name account_name
FROM sales_reps
LEFT JOIN region
	ON sales_reps.region_id = region.id AND
    	region.name = 'Midwest' AND
        sales_reps.name LIKE 'S%'
LEFT JOIN accounts
	ON sales_reps.id = accounts.sales_rep_id
ORDER BY accounts.name

6) Provide a table that provides the region for each sales_rep along with their associated accounts. This time only for accounts where the sales rep has a last name starting with K and in the Midwest region. Your final table should include three columns: the region name, the sales rep name, and the account name. Sort the accounts alphabetically (A-Z) according to account name.
SELECT sales_reps.name sales_rep_name, region.name region_name, accounts.name account_name
FROM sales_reps
LEFT JOIN region
	ON sales_reps.region_id = region.id AND
    	region.name = 'Midwest' AND
        sales_reps.name LIKE '% K%'
LEFT JOIN accounts
	ON sales_reps.id = accounts.sales_rep_id
ORDER BY accounts.name

7) Provide the name for each region for every order, as well as the account name and the unit price they paid (total_amt_usd/total) for the order. However, you should only provide the results if the standard order quantity exceeds 100. Your final table should have 3 columns: region name, account name, and unit price. In order to avoid a division by zero error, adding .01 to the denominator here is helpful total_amt_usd/(total+0.01). 
SELECT orders.id, accounts.name account_name, region.name region_name, (total_amt_usd / (total+0.001)) unit_price
FROM orders
LEFT JOIN accounts
	on orders.account_id = accounts.id AND
    	standard_amt_usd > 100
LEFT JOIN sales_reps
	ON accounts.sales_rep_id = sales_reps.id
LEFT JOIN region
	ON sales_reps.region_id = region.id

8) Provide the name for each region for every order, as well as the account name and the unit price they paid (total_amt_usd/total) for the order. However, you should only provide the results if the standard order quantity exceeds 100 and the poster order quantity exceeds 50. Your final table should have 3 columns: region name, account name, and unit price. Sort for the smallest unit price first. In order to avoid a division by zero error, adding .01 to the denominator here is helpful (total_amt_usd/(total+0.01). 
SELECT orders.id, accounts.name account_name, region.name region_name, (total_amt_usd / (total+0.001)) unit_price
FROM orders
LEFT JOIN accounts
	on orders.account_id = accounts.id AND
    	standard_amt_usd > 100 AND
        poster_amt_usd > 50
LEFT JOIN sales_reps
	ON accounts.sales_rep_id = sales_reps.id
LEFT JOIN region
	ON sales_reps.region_id = region.id
ORDER BY unit_price

9) Provide the name for each region for every order, as well as the account name and the unit price they paid (total_amt_usd/total) for the order. However, you should only provide the results if the standard order quantity exceeds 100 and the poster order quantity exceeds 50. Your final table should have 3 columns: region name, account name, and unit price. Sort for the largest unit price first. In order to avoid a division by zero error, adding .01 to the denominator here is helpful (total_amt_usd/(total+0.01). 
SELECT orders.id, accounts.name account_name, region.name region_name, (total_amt_usd / (total+0.001)) unit_price
FROM orders
LEFT JOIN accounts
	on orders.account_id = accounts.id AND
    	standard_amt_usd > 100 AND
        poster_amt_usd > 50
LEFT JOIN sales_reps
	ON accounts.sales_rep_id = sales_reps.id
LEFT JOIN region
	ON sales_reps.region_id = region.id
ORDER BY unit_price DESC

10) What are the different channels used by account id 1001? Your final table should have only 2 columns: account name and the different channels. You can try SELECT DISTINCT to narrow down the results to only the unique values.
SELECT DISTINCT accounts.name, web_events.channel
FROM accounts
JOIN web_events
	ON web_events.account_id = accounts.id AND
    	accounts.id = 1001

11) Find all the orders that occurred in 2015. Your final table should have 4 columns: occurred_at, account name, order total, and order total_amt_usd.
SELECT DISTINCT orders.occurred_at, accounts.name, orders.total, orders.total_amt_usd
FROM orders
JOIN accounts
	ON orders.account_id = accounts.id
WHERE orders.occurred_at >= '2015-01-01' AND
	orders.occurred_at <= '2015-12-31'
ORDER BY orders.occurred_at DESC;

----------------------------
     AGGREGATIONS
----------------------------
1) Find the total amount of poster_qty paper ordered in the orders table.
SELECT sum(poster_qty)
FROM orders

2) Find the total amount of standard_qty paper ordered in the orders table.
SELECT sum(standard_qty)
FROM orders

3) Find the total dollar amount of sales using the total_amt_usd in the orders table.
SELECT sum(total_amt_usd)
FROM orders

4) Find the total amount spent on standard_amt_usd and gloss_amt_usd paper for each order in the orders table. This should give a dollar amount for each order in the table.
SELECT standard_amt_usd + gloss_amt_usd AS total_standard_gloss
FROM orders;

5) Find the standard_amt_usd per unit of standard_qty paper. Your solution should use both an aggregation and a mathematical operator.
SELECT sum(standard_amt_usd) total_standard_amt_usd, sum(standard_qty) total_standard_qty, (sum(standard_amt_usd) / sum(standard_qty)) unit_price
FROM orders

6) When was the earliest order ever placed? You only need to return the date.
SELECT MIN(occurred_at)
FROM orders

7) Try performing the same query as in question 1 without using an aggregation function. 
SELECT occurred_at
FROM orders
ORDER BY occurred_at
LIMIT 1

8) When did the most recent (latest) web_event occur?
SELECT MIN(occurred_at)
FROM web_events

9) Try to perform the result of the previous query without using an aggregation function.
SELECT occurred_at
FROM web_events
ORDER BY occurred_at DESC
LIMIT 1

10) Find the mean (AVERAGE) amount spent per order on each paper type, as well as the mean amount of each paper type purchased per order. Your final answer should have 6 values - one for each paper type for the average number of sales, as well as the average amount.
SELECT (SUM(standard_qty)/COUNT(standard_qty)) AS mean_standard_qty, (SUM(standard_amt_usd)/COUNT(standard_amt_usd)) AS mean_standard_amt_usd, (SUM(gloss_qty)/COUNT(gloss_qty)) AS mean_gloss_qty, (SUM(gloss_amt_usd)/COUNT(gloss_amt_usd)) AS mean_gloss_amt_usd, (SUM(poster_qty)/COUNT(poster_qty)) AS mean_poster_qty, (SUM(poster_amt_usd)/COUNT(poster_amt_usd)) AS mean_poster_amt_usd
FROM orders

11) Via the video, you might be interested in how to calculate the MEDIAN. Though this is more advanced than what we have covered so far try finding - what is the MEDIAN total_usd spent on all orders?
SELECT SUM(Table2.total_amt_usd) / COUNT(Table2.total_amt_usd)
FROM (SELECT *
      FROM (SELECT total_amt_usd
            FROM orders
            ORDER BY total_amt_usd
            LIMIT 3457) AS Table1
      ORDER BY total_amt_usd DESC
      LIMIT 2) AS Table2


-------------------------------------------
	GROUP BY & JOIN & AGGREGATIONS
-------------------------------------------
1) Which account (by name) placed the earliest order? Your solution should have the account name and the date of the order.
SELECT accounts.name, orders.occurred_at
FROM orders
JOIN accounts
	ON accounts.id = orders.account_id
ORDER BY orders.occurred_at
LIMIT 1

2) Find the total sales in usd for each account. You should include two columns - the total sales for each company's orders in usd and the company name.
SELECT accounts.name, SUM(orders.total_amt_usd)
FROM orders
JOIN accounts
	ON orders.account_id = accounts.id
GROUP BY accounts.name
ORDER BY accounts.name

3) Via what channel did the most recent (latest) web_event occur, which account was associated with this web_event? Your query should return only three values - the date, channel, and account name.
SELECT accounts.name, web_events.occurred_at, web_events.channel
FROM web_events
JOIN accounts
	ON accounts.id = web_events.account_id
ORDER BY web_events.occurred_at DESC
LIMIT 1
	
4) Find the total number of times each type of channel from the web_events was used. Your final table should have two columns - the channel and the number of times the channel was used.
SELECT web_events.channel, COUNT(web_events.id) web_event_count
FROM web_events
GROUP BY web_events.channel
ORDER BY web_event_count DESC

5) Who was the primary contact associated with the earliest web_event? 
SELECT accounts.primary_poc, web_events.occurred_at
FROM web_events
JOIN accounts
	ON accounts.id = web_events.account_id
ORDER BY web_events.occurred_at DESC
LIMIT 1

6) What was the smallest order placed by each account in terms of total usd. Provide only two columns - the account name and the total usd. Order from smallest dollar amounts to largest.
SELECT accounts.name AS company_name, MIN(orders.total_amt_usd) min_total_amt_usd
FROM orders
JOIN accounts
	ON accounts.id = orders.account_id
GROUP BY accounts.name
ORDER BY min_total_amt_usd

7) Find the number of sales reps in each region. Your final table should have two columns - the region and the number of sales_reps. Order from fewest reps to most reps.
SELECT region.name, COUNT(sales_reps.id) count
FROM sales_reps
JOIN region
	ON region.id = sales_reps.region_id
GROUP BY region.name
ORDER BY count

8) For each account, determine the average amount of each type of paper they purchased across their orders. Your result should have four columns - one for the account name and one for the average quantity purchased for each of the paper types for each account. 
SELECT  accounts.name, 
		AVG(orders.standard_qty) avg_std_qty, 
		AVG(orders.gloss_qty) avg_glossy_qty, 
		AVG(orders.poster_qty) avg_poster_qty
FROM orders
JOIN accounts
	ON accounts.id = orders.account_id
GROUP BY accounts.name
ORDER BY accounts.name

9) For each account, determine the average amount spent per order on each paper type. Your result should have four columns - one for the account name and one for the average amount spent on each paper type.
SELECT  accounts.name, 
		AVG(orders.standard_amt_usd) avg_std_amt_usd, 
		AVG(orders.gloss_amt_usd) avg_glossy_amt_usd, 
		AVG(orders.poster_amt_usd) avg_poster_amt_usd
FROM orders
JOIN accounts
	ON accounts.id = orders.account_id
GROUP BY accounts.name
ORDER BY accounts.name

10) Determine the number of times a particular channel was used in the web_events table for each sales rep. Your final table should have three columns - the name of the sales rep, the channel, and the number of occurrences. Order your table with the highest number of occurrences first.
SELECT sales_reps.name, channel, 
		channel_count
FROM (SELECT sales_reps.id id, 
      		web_events.channel channel,
      		COUNT(web_events.channel) channel_count
  from web_events
  JOIN accounts
      ON accounts.id = web_events.account_id
  JOIN sales_reps
      ON sales_reps.id = accounts.sales_rep_id
  GROUP BY web_events.channel, sales_reps.id) AS Table1
JOIN sales_reps
	ON sales_reps.id = Table1.id
ORDER BY channel_count DESC

11) Determine the number of times a particular channel was used in the web_events table for each region. Your final table should have three columns - the region name, the channel, and the number of occurrences. Order your table with the highest number of occurrences first.
SELECT region.name, channel, 
		channel_count
FROM (SELECT region.id id, 
      	web_events.channel channel,
      	COUNT(web_events.channel) channel_count
  	from web_events
  	JOIN accounts
		ON web_events.account_id = accounts.id
  	JOIN sales_reps
      	ON accounts.sales_rep_id = sales_reps.id
  	JOIN region
      	ON sales_reps.region_id = region.id
  	GROUP BY web_events.channel, region.id) AS Table1
JOIN region
	ON region.id = Table1.id
ORDER BY channel_count DESC

------------------
	DISTINCT
------------------
1) Use DISTINCT to test if there are any accounts associated with more than one region.
SELECT DISTINCT accounts.sales_rep_id
FROM accounts

2) Have any sales reps worked on more than one account?
SELECT DISTINCT sales_reps.id, sales_reps.name
FROM sales_reps

------------------
	HAVING
------------------
1) How many of the sales reps have more than 5 accounts that they manage?
SELECT sales_reps.id sales_rep_id, 
		sales_reps.name sales_rep_name, 
        COUNT(accounts.id) account_id_count
FROM sales_reps
JOIN accounts
	ON sales_reps.id = accounts.sales_rep_id
GROUP BY sales_reps.id, sales_reps.name
HAVING COUNT(accounts.id) > 5
ORDER BY account_id_count

2) How many accounts have more than 20 orders?
SELECT account_id, COUNT(account_id)
FROM orders
GROUP BY account_id
HAVING COUNT(account_id) > 20
ORDER BY COUNT(account_id)

3) Which account has the most orders?
SELECT account_id, COUNT(account_id)
FROM orders
GROUP BY account_id
ORDER BY COUNT(account_id) DESC
LIMIT 1

4) Which accounts spent more than 30,000 usd total across all orders?
SELECT account_id, SUM(total_amt_usd) sum
FROM orders
GROUP BY account_id
HAVING SUM(total_amt_usd) > 30000
ORDER BY SUM(total_amt_usd)

5) Which accounts spent less than 1,000 usd total across all orders?
SELECT account_id, SUM(total_amt_usd) sum
FROM orders
GROUP BY account_id
HAVING SUM(total_amt_usd) < 1000
ORDER BY SUM(total_amt_usd) DESC

6) Which account has spent the most with us?
SELECT account_id, SUM(total_amt_usd) sum
FROM orders
GROUP BY account_id
ORDER BY SUM(total_amt_usd) DESC
LIMIT 1

7) Which account has spent the least with us?
SELECT account_id, SUM(total_amt_usd) sum
FROM orders
GROUP BY account_id
ORDER BY SUM(total_amt_usd)
LIMIT 1

8) Which accounts used facebook as a channel to contact customers more than 6 times?
SELECT account_id, channel, COUNT(channel)
FROM web_events
WHERE channel = 'facebook'
GROUP BY channel, account_id
HAVING COUNT(channel) > 6
ORDER BY COUNT(channel)

9) Which account used facebook most as a channel? 
SELECT account_id, channel, COUNT(channel)
FROM web_events
WHERE channel = 'facebook'
GROUP BY channel, account_id
ORDER BY COUNT(channel) DESC
LIMIT 1

10) Which channel was most frequently used by most accounts?
SELECT account_id, channel, COUNT(channel)
FROM web_events
GROUP BY channel, account_id
ORDER BY COUNT(channel) DESC
LIMIT 10


------------------
	DATE
------------------
1) Find the sales in terms of total dollars for all orders in each year, ordered from greatest to least. Do you notice any trends in the yearly sales totals?
SELECT DATE_TRUNC('year', occurred_at) year_of_sale, SUM(total_amt_usd) total_sales
FROM orders
GROUP BY DATE_TRUNC('year', occurred_at)
ORDER BY SUM(total_amt_usd) DESC

2) Which month did Parch & Posey have the greatest sales in terms of total dollars? Are all months evenly represented by the dataset?
SELECT DATE_TRUNC('month', occurred_at) month_of_sale, SUM(total_amt_usd) total_sales
FROM orders
GROUP BY DATE_TRUNC('month', occurred_at)
ORDER BY SUM(total_amt_usd) DESC

3) Which year did Parch & Posey have the greatest sales in terms of total number of orders? Are all years evenly represented by the dataset?
SELECT DATE_TRUNC('year', occurred_at) year_of_sale, COUNT(total) total_orders
FROM orders
GROUP BY DATE_TRUNC('year', occurred_at)
ORDER BY SUM(total) DESC
LIMIT 1

4) Which month did Parch & Posey have the greatest sales in terms of total number of orders? Are all months evenly represented by the dataset?
SELECT DATE_TRUNC('month', occurred_at) year_of_sale, SUM(total) total_sales_qty
FROM orders
GROUP BY DATE_TRUNC('month', occurred_at)
ORDER BY SUM(total) DESC
LIMIT 1

5) In which month of which year did Walmart spend the most on gloss paper in terms of dollars?
SELECT DATE_TRUNC('month', orders.occurred_at), SUM(poster_qty)
FROM orders
JOIN accounts
	ON orders.account_id = accounts.id
WHERE accounts.name = 'Walmart'
GROUP BY DATE_TRUNC('month', orders.occurred_at)
ORDER BY SUM(poster_qty) DESC


------------------
	  CASE
------------------
1) Write a query to display for each order, the account ID, total amount of the order, and the level of the order - ‘Large’ or ’Small’ - depending on if the order is $3000 or more, or smaller than $3000.
SELECT account_id, total, CASE WHEN total_amt_usd >= 3000 THEN 'Large' ELSE 'Small' END as order_cmp
FROM orders

2) Write a query to display the number of orders in each of three categories, based on the 'total' amount of each order. The three categories are: 'At Least 2000', 'Between 1000 and 2000' and 'Less than 1000'.
SELECT CASE 
  WHEN total >= 2000 THEN 'At least 2000'
  WHEN total >= 1000 THEN 'Between 1000 and 2000'
  ELSE 'Less than 1000' END AS group, COUNT(*)
FROM orders
GROUP BY 1
ORDER BY 2 DESC

3) We would like to understand 3 different levels of customers based on the amount associated with their purchases. The top level includes anyone with a Lifetime Value (total sales of all orders) greater than 200,000 usd. The second level is between 200,000 and 100,000 usd. The lowest level is anyone under 100,000 usd. Provide a table that includes the level associated with each account. You should provide the account name, the total sales of all orders for the customer, and the level. Order with the top spending customers listed first.
SELECT accounts.name, 
  SUM(total_amt_usd), 
  CASE
  WHEN SUM(total_amt_usd) >= 200000 THEN 'Top Level'
  WHEN SUM(total_amt_usd) >= 100000 THEN 'Second Level'
  ELSE 'Lowest Level' END as level
FROM orders
JOIN accounts
	ON orders.account_id = accounts.id
GROUP BY 1
ORDER BY 2 DESC

4) We would now like to perform a similar calculation to the first, but we want to obtain the total amount spent by customers only in 2016 and 2017. Keep the same levels as in the previous question. Order with the top spending customers listed first.
SELECT accounts.name, 
  SUM(total_amt_usd), 
  CASE
  WHEN SUM(total_amt_usd) >= 200000 THEN 'Top Level'
  WHEN SUM(total_amt_usd) >= 100000 THEN 'Second Level'
  ELSE 'Lowest Level' END as level
FROM orders
JOIN accounts
	ON orders.account_id = accounts.id
WHERE orders.occurred_at BETWEEN '2016-01-01' AND '2018-01-01'
GROUP BY 1
ORDER BY 2 DESC

5) We would like to identify top performing sales reps, which are sales reps associated with more than 200 orders. Create a table with the sales rep name, the total number of orders, and a column with top or not depending on if they have more than 200 orders. Place the top sales people first in your final table.
SELECT Table1.sales_rep_id, sales_reps.name, Table1.order_count, Table1.is_top
FROM (SELECT sales_reps.id sales_rep_id, COUNT(sales_reps.id) order_count, 
	CASE WHEN COUNT(sales_reps.id) > 200 THEN 'YES' ELSE 'NOT' END AS is_top
FROM orders
JOIN accounts
	ON orders.account_id = accounts.id
JOIN sales_reps
	ON accounts.sales_rep_id = sales_reps.id
GROUP BY sales_reps.id) As Table1
JOIN sales_reps
	ON sales_reps.id = Table1.sales_rep_id
ORDER BY Table1.order_count DESC

6) The previous didn't account for the middle, nor the dollar amount associated with the sales. Management decides they want to see these characteristics represented as well. We would like to identify top performing sales reps, which are sales reps associated with more than 200 orders or more than 750000 in total sales. The middle group has any rep with more than 150 orders or 500000 in sales. Create a table with the sales rep name, the total number of orders, total sales across all orders, and a column with top, middle, or low depending on this criteria. Place the top sales people based on dollar amount of sales first in your final table. You might see a few upset sales people by this criteria!
SELECT sales_reps.id sales_rep_id,  COUNT(sales_reps.id) order_count, 
SUM(total_amt_usd) total_sales,
	CASE 
    WHEN COUNT(sales_reps.id) > 200 OR SUM(total_amt_usd) > 750000 THEN 'TOP' 
    WHEN COUNT(sales_reps.id) > 150 OR SUM(total_amt_usd) > 500000 THEN 'MIDDLE' 
    ELSE 'LOW' END AS level
FROM orders
JOIN accounts
	ON orders.account_id = accounts.id
JOIN sales_reps
	ON accounts.sales_rep_id = sales_reps.id
GROUP BY sales_reps.id
ORDER BY SUM(total_amt_usd) DESC

7) Find the number of events occur for each day and each channel
SELECT channel, DATE_TRUNC('day', occurred_at), COUNT(*)
FROM web_events
GROUP BY 1, 2

8) Create a sub-query that provides the data collected from the previous query to this query
SELECT *
FROM (SELECT channel, DATE_TRUNC('day', occurred_at), COUNT(*)
FROM web_events
GROUP BY 1, 2) sub_query

9) Find the average event per day by each channel
SELECT channel, AVG(event_per_day) avg_event_per_day
FROM (SELECT channel, DATE_TRUNC('day', occurred_at) day_of_event, COUNT(*) event_per_day
FROM web_events
GROUP BY 1, 2) sub_query
GROUP BY channel
ORDER BY avg_event_per_day DESC

10) Provide the name of the sales_rep in each region with the largest amount of total_amt_usd sales.
SELECT region.name, MAX(T1.total_amt_sale) max
FROM (SELECT sales_reps.id sales_rep_id, sales_reps.region_id region_id,  SUM(orders.total_amt_usd) total_amt_sale
FROM orders
JOIN accounts
	ON orders.account_id = accounts.id
JOIN sales_reps
	ON accounts.sales_rep_id = sales_reps.id
GROUP BY sales_reps.id, sales_reps.region_id) T1
JOIN region
	ON T1.region_id = region.id
GROUP BY region.id, region.name
ORDER BY MAX(T1.total_amt_sale) DESC

11) For the region with the largest (sum) of sales total_amt_usd, how many total (count) orders were placed? 
SELECT r.name, COUNT(o.total) total_orders
FROM sales_reps s
JOIN accounts a
ON a.sales_rep_id = s.id
JOIN orders o
ON o.account_id = a.id
JOIN region r
ON r.id = s.region_id
GROUP BY r.name
HAVING SUM(o.total_amt_usd) = (
      SELECT MAX(total_amt)
      FROM (SELECT r.name region_name, SUM(o.total_amt_usd) total_amt
              FROM sales_reps s
              JOIN accounts a
              ON a.sales_rep_id = s.id
              JOIN orders o
              ON o.account_id = a.id
              JOIN region r
              ON r.id = s.region_id
              GROUP BY r.name) sub);

12) For the name of the account that purchased the most (in total over their lifetime as a customer) standard_qty paper, how many accounts still had more in total purchases? 
SELECT a.name
FROM orders o
JOIN accounts a
ON a.id = o.account_id
GROUP BY 1
HAVING SUM(o.total) > (SELECT total 
                  FROM (SELECT a.name act_name, SUM(o.standard_qty) tot_std, SUM(o.total) total
                        FROM accounts a
                        JOIN orders o
                        ON o.account_id = a.id
                        GROUP BY 1
                        ORDER BY 2 DESC
                        LIMIT 1) sub);

13) For the customer that spent the most (in total over their lifetime as a customer) total_amt_usd, how many web_events did they have for each channel?
SELECT a.name, w.channel, COUNT(*)
FROM accounts a
JOIN web_events w
ON a.id = w.account_id AND a.id =  (SELECT id
                     FROM (SELECT a.id, a.name, SUM(o.total_amt_usd) tot_spent
                           FROM orders o
                           JOIN accounts a
                           ON a.id = o.account_id
                           GROUP BY a.id, a.name
                           ORDER BY 3 DESC
                           LIMIT 1) inner_table)
GROUP BY 1, 2
ORDER BY 3 DESC;

14) What is the lifetime average amount spent in terms of total_amt_usd for the top 10 total spending accounts?
SELECT AVG(tot_spent)
FROM (SELECT a.id, a.name, SUM(o.total_amt_usd) tot_spent
      FROM orders o
      JOIN accounts a
      ON a.id = o.account_id
      GROUP BY a.id, a.name
      ORDER BY 3 DESC
       LIMIT 10) temp;

15) What is the lifetime average amount spent in terms of total_amt_usd for only the companies that spent more than the average of all orders.
SELECT AVG(avg_amt)
FROM (SELECT o.account_id, AVG(o.total_amt_usd) avg_amt
    FROM orders o
    GROUP BY 1
    HAVING AVG(o.total_amt_usd) > (SELECT AVG(o.total_amt_usd) avg_all
                                   FROM orders o)) temp_table;

-----------------------
		WITH
-----------------------
Just remember that WITH is a replacement of Sub Query, just change all the above queries where-ever sub-queries are present


----------------------------
		LEFT / RIGHT
----------------------------
1) In the accounts table, there is a column holding the website for each company. The last three digits specify what type of web address they are using. A list of extensions (and pricing) is provided here. Pull these extensions and provide how many of each website type exist in the accounts table.
SELECT RIGHT(website, 3) AS ext, COUNT(*) AS count
FROM accounts
GROUP BY ext
ORDER BY count DESC

2) There is much debate about how much the name (or even the first letter of a company name) matters. Use the accounts table to pull the first letter of each company name to see the distribution of company names that begin with each letter (or number). 
SELECT LEFT(name, 1) AS starting_letter_company, COUNT(*) counts
FROM accounts
GROUP BY starting_letter_company
ORDER BY starting_letter_company

3) Use the accounts table and a CASE statement to create two groups: one group of company names that start with a number and a second group of those company names that start with a letter. What proportion of company names start with a letter?
WITH T1 AS (SELECT LEFT(name, 1) AS starting_letter_company, COUNT(*) counts
FROM accounts
GROUP BY starting_letter_company),

T2 AS (SELECT starting_letter_company, counts,  CASE 
WHEN starting_letter_company BETWEEN 'a' AND 'z' THEN 'yes'
WHEN starting_letter_company BETWEEN 'A' AND 'Z' THEN 'yes'
ELSE 'no' END AS is_alpha
FROM T1)

SELECT is_alpha, SUM(counts)
FROM T2
GROUP BY is_alpha

4) Consider vowels as a, e, i, o, and u. What proportion of company names start with a vowel, and what percent start with anything else?
SELECT SUM(vowels) vowels, SUM(other) other
FROM (SELECT name, CASE WHEN LEFT(UPPER(name), 1) IN ('A','E','I','O','U') 
                        THEN 1 ELSE 0 END AS vowels, 
          CASE WHEN LEFT(UPPER(name), 1) IN ('A','E','I','O','U') 
                       THEN 0 ELSE 1 END AS other
         FROM accounts) t1;

-----------------------------
	LEFT / RIGHT / POSITION
-----------------------------
1) Use the accounts table to create first and last name columns that hold the first and last names for the primary_poc. 
SELECT primary_poc, 
	POSITION(' ' IN primary_poc) AS position,
	LEFT(primary_poc, POSITION(' ' IN primary_poc)-1) AS first_name, 
    RIGHT(primary_poc, LENGTH(primary_poc) - POSITION(' ' IN primary_poc)) AS last_name
FROM accounts

2) Now see if you can do the same thing for every rep name in the sales_reps table. Again provide first and last name columns.
SELECT LEFT(name, STRPOS(name, ' ') -1 ) first_name, 
       RIGHT(name, LENGTH(name) - STRPOS(name, ' ')) last_name
FROM sales_reps;

--------------------------
		CONCAT
--------------------------
1) Each company in the accounts table wants to create an email address for each primary_poc. The email address should be the first name of the primary_poc . last name primary_poc @ company name .com.
WITH t1 AS (
 SELECT LEFT(primary_poc,
			STRPOS(primary_poc, ' ') -1 ) first_name,  
			RIGHT(primary_poc, LENGTH(primary_poc) - STRPOS(primary_poc, ' ')) last_name, 
			name
 FROM accounts)
SELECT first_name, last_name, CONCAT(first_name, '.', last_name, '@', name, '.com')
FROM t1;

2) You may have noticed that in the previous solution some of the company names include spaces, which will certainly not work in an email address. See if you can create an email address that will work by removing all of the spaces in the account name, but otherwise your solution should be just as in question 1. Some helpful documentation is here.
WITH t1 AS (
 SELECT LEFT(primary_poc,
			STRPOS(primary_poc, ' ') -1 ) first_name,
			RIGHT(primary_poc, LENGTH(primary_poc) - STRPOS(primary_poc, ' ')) last_name,
			name
 FROM accounts)
SELECT first_name, last_name, CONCAT(first_name, '.', last_name, '@', REPLACE(name, ' ', ''), '.com')
FROM  t1;

3) We would also like to create an initial password, which they will change after their first log in. The first password will be the first letter of the primary_poc's first name (lowercase), then the last letter of their first name (lowercase), the first letter of their last name (lowercase), the last letter of their last name (lowercase), the number of letters in their first name, the number of letters in their last name, and then the name of the company they are working with, all capitalized with no spaces.
WITH t1 AS (
 SELECT LEFT(primary_poc,
			STRPOS(primary_poc, ' ') -1 ) first_name,
			RIGHT(primary_poc, LENGTH(primary_poc) - STRPOS(primary_poc, ' ')) last_name,
			name
FROM accounts)
SELECT first_name,
		last_name, 
		CONCAT(first_name, '.', last_name, '@', name, '.com'), 
		LEFT(LOWER(first_name), 1) || RIGHT(LOWER(first_name), 1) || LEFT(LOWER(last_name), 1) || RIGHT(LOWER(last_name), 1) || LENGTH(first_name) || LENGTH(last_name) || REPLACE(UPPER(name), ' ', '')
FROM t1;

--------------------------
		WINDOW
--------------------------
1) Using Derek's previous video as an example, create another running total. This time, create a running total of standard_amt_usd (in the orders table) over order time with no date truncation. Your final table should have two columns: one with the amount being added for each new row, and a second with the running total.
SELECT occurred_at,
		standard_amt_usd,
		SUM(standard_amt_usd) over (ORDER BY occurred_at)
FROM orders

2) Now, modify your query from the previous quiz to include partitions. Still create a running total of standard_amt_usd (in the orders table) over order time, but this time, date truncate occurred_at by year and partition by that same year-truncated occurred_at variable. Your final table should have three columns: One with the amount being added for each row, one for the truncated date, and a final column with the running total within each year.
SELECT DATE_TRUNC('year', occurred_at),
		standard_amt_usd,
		SUM(standard_amt_usd) over (PARTITION BY DATE_TRUNC('year', occurred_at) ORDER BY occurred_at) AS running_year_total
FROM orders

3) Select the id, account_id, and total variable from the orders table, then create a column called total_rank that ranks this total amount of paper ordered (from highest to lowest) for each account using a partition. Your final table should have these four columns
SELECT id, 
		account_id, 
        total,
        DENSE_RANK() OVER (PARTITION BY account_id ORDER BY total DESC)
FROM orders
LIMIT 50

4) Derek's play code
SELECT id,
       account_id,
       standard_qty,
       DATE_TRUNC('month', occurred_at) AS month,
       DENSE_RANK() OVER (PARTITION BY account_id ORDER BY DATE_TRUNC('month',occurred_at)) AS dense_rank,
       SUM(standard_qty) OVER (PARTITION BY account_id ORDER BY DATE_TRUNC('month',occurred_at)) AS sum_std_qty,
       COUNT(standard_qty) OVER (PARTITION BY account_id ORDER BY DATE_TRUNC('month',occurred_at)) AS count_std_qty,
       AVG(standard_qty) OVER (PARTITION BY account_id ORDER BY DATE_TRUNC('month',occurred_at)) AS avg_std_qty,
       MIN(standard_qty) OVER (PARTITION BY account_id ORDER BY DATE_TRUNC('month',occurred_at)) AS min_std_qty,
       MAX(standard_qty) OVER (PARTITION BY account_id ORDER BY DATE_TRUNC('month',occurred_at)) AS max_std_qty
FROM orders

5) Remove DATE_TRUNC part
SELECT id,
       account_id,
       standard_qty,
       DENSE_RANK() OVER (PARTITION BY account_id) AS dense_rank,
       SUM(standard_qty) OVER (PARTITION BY account_id) AS sum_std_qty,
       COUNT(standard_qty) OVER (PARTITION BY account_id) AS count_std_qty,
       AVG(standard_qty) OVER (PARTITION BY account_id) AS avg_std_qty,
       MIN(standard_qty) OVER (PARTITION BY account_id) AS min_std_qty,
       MAX(standard_qty) OVER (PARTITION BY account_id) AS max_std_qty
FROM orders

6) WINDOW Alias
SELECT id,
       account_id,
       DATE_TRUNC('year',occurred_at) AS year,
       DENSE_RANK() OVER my_window AS dense_rank,
       total_amt_usd,
       SUM(total_amt_usd) OVER my_window AS sum_total_amt_usd,
       COUNT(total_amt_usd) OVER my_window AS count_total_amt_usd,
       AVG(total_amt_usd) OVER my_window AS avg_total_amt_usd,
       MIN(total_amt_usd) OVER my_window AS min_total_amt_usd,
       MAX(total_amt_usd) OVER my_window AS max_total_amt_usd
FROM orders
WINDOW my_window AS (PARTITION BY account_id ORDER BY DATE_TRUNC('year',occurred_at))

7) Use the NTILE functionality to divide the accounts into 4 levels in terms of the amount of standard_qty for their orders. Your resulting table should have the account_id, the occurred_at time for each order, the total amount of standard_qty paper purchased, and one of four levels in a standard_quartile column.
SELECT account_id, occurred_at, standard_qty,
		NTILE(4) OVER (ORDER BY standard_qty) AS quartile
FROM orders

8) Use the NTILE functionality to divide the accounts into two levels in terms of the amount of gloss_qty for their orders. Your resulting table should have the account_id, the occurred_at time for each order, the total amount of gloss_qty paper purchased, and one of two levels in a gloss_half column.
SELECT account_id, occurred_at, gloss_qty,
		NTILE(2) OVER (ORDER BY gloss_qty) AS quartile
FROM orders

9) Use the NTILE functionality to divide the orders for each account into 100 levels in terms of the amount of total_amt_usd for their orders. Your resulting table should have the account_id, the occurred_at time for each order, the total amount of total_amt_usd paper purchased, and one of 100 levels in a total_percentile column.
SELECT account_id, occurred_at, total_amt_usd,
		NTILE(100) OVER (ORDER BY total_amt_usd) AS quartile
FROM orders